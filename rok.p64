picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyIscmV2aXNpb249NjE1XV1sejQA6AEAAHEyAADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAx3k9MCx6b29tPTh9LD4A8AAICASg
GUAJFQkQJQcVCQAFAH8gCRUJQBmgRgALLDEzRwBwAAVQJRkwNT8AbwcFCRAJBUsAJ0AgFVAVlABA
IAkFF0sAHzVJACWCUAUwGSUQCTWOABEQmgAPSwAkAiYBAN0AICUABQAfEEcALQYkAX81MBklUAUA
SwAlEDVJABMX2QBPFVAVIEkAJQYkAZ8QNQkQJRkwBVBLABoAigIf8H0CDA8xAP8hrwgIBPALF1AX
8As2AB0QAg8EEAQFAB8COwAcr4AHMAfwEgcwB4AMAR4PMQDhkTUIABgACLAX0AIAk7AIABcACFAY
AAIA-wLwAgi3CBAIsAgQCACYAAjwAZAAHg8xAP9Ee0NrcAuQCzAEAE9Aa-A2ewAeDzEA-----1MA
0AfvCQwADFAMABwAHEAM8AE_AB2RBQwAHCAMAAwQRgAv8AVAAB1AAgwwHDwAbyAMEAxwDFMIHnDw
DQwAHBAMAgAv8AY8AB2PCAxADDAM8AyUAR4PMQD-------------------------------------
------------UFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyIscmV2aXNpb249NTgyXV1sejQAaAAAAFgQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP--------------------vxCCIpLGhpZGRlbj1mYWxzZSxwYW5feD0w
CADSeT0wLHRpbGVfaD0xNgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyIscmV2aXNpb249NTgyXV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyJdXQ==
:: bullet.lua
--[[pod_format="raw",created="2025-05-08 12:42:25",modified="2025-05-08 14:53:23",revision=467]]


bullets = {}

Bullet=Object:extend()

function Bullet:new(parent, dir)
	--todo: fix
	if dir[1] == 0 and dir[2] == 0 then
		return
	end
    self.x=parent.x
    self.y=parent.y
    self.img=16
    self.w = 4
    self.h = 4
    self.col = 7
    self.speed=2
    self.dx = dir[1]
    self.dy = dir[2]

    self.hitbox = Hitbox(self,self.x,self.y+4,self.w, self.h,2,2 )
    add(bullets, self)
end

function Bullet:update()
	self.dx, self.dy = normalize_vector(self.dx, self.dy)
	self.x += self.dx * self.speed
	self.y += self.dy * self.speed
	if self.x <= -5 or self.x>= 130 or
		self.y<= -5 or self.y>=130 then
			del(bullets,self)
	end
	self.hitbox:update()
end

function Bullet:draw()
    spr(self.img,self.x,self.y)
end

:: ceiling.lua
--[[pod_format="raw",created="2025-05-08 13:03:56",modified="2025-05-08 14:47:34",revision=364]]


ceiling = {
	tic=0,
	x=2, 
	y=2,
	hitbox = Hitbox(nil,1,3,125,6)
}

local ceiling_segment = {}

for i = 1, 18 do
	   ceiling_segment[i] = rnd({56,57,58,59})
end

function ceiling:draw()
	for i = 0, 18 do
	   spr(ceiling_segment[i+1], 0 + (7 * i), 3)
	end	
end

function ceiling:update()
	self.tic+=1
	if self.tic >= 4 then
		self.tic=0
		for i = 1, 18 do
			ceiling_segment[i] = rnd({56,57,58,59})
--			if ceiling_segment[i] < 60 then
--			    ceiling_segment[i] += 1
--			else 
--				ceiling_segment[i] = 56
--			end
		end	
	end
end
:: classic.lua
--[[pod_format="raw",created="2025-05-08 12:32:22",modified="2025-05-08 14:07:59",revision=284]]
--
-- classic
--
-- Copyright (c) 2014, rxi
--
-- This module is free software; you can redistribute it and/or modify it under
-- the terms of the MIT license. See LICENSE for details.
--


Object = {}
Object.__index = Object


function Object:new()
end


function Object:extend()
  local cls = {}
  for k, v in pairs(self) do
    if k:find("__") == 1 then
      cls[k] = v
    end
  end
  cls.__index = cls
  cls.super = self
  setmetatable(cls, self)
  return cls
end


function Object:implement(...)
  for _, cls in pairs({...}) do
    for k, v in pairs(cls) do
      if self[k] == nil and type(v) == "function" then
        self[k] = v
      end
    end
  end
end


function Object:is(T)
  local mt = getmetatable(self)
  while mt do
    if mt == T then
      return true
    end
    mt = getmetatable(mt)
  end
  return false
end


function Object:__tostring()
  return "Object"
end


function Object:__call(...)
  local obj = setmetatable({}, self)
  obj:new(...)
  return obj
end
:: enemy.lua
--[[pod_format="raw",created="2025-05-08 14:50:13",modified="2025-05-08 14:53:23",revision=10]]
Enemy = Object:extend()

function Enemy:new(x,y)
	self.x = x
	self.y = y
	self.w = 0
	self.h = 0
	self.img = nil
	self.health = 0
	self.hitbox = Hitbox(self, self.x, self.y, self.w, self.h)
end

function Enemy:update()
end

function Enemy:draw()
end

function Enemy:take_damage()
end

function Enemy:die()
end
:: hitbox.lua
--[[pod_format="raw",created="2025-05-08 13:53:26",modified="2025-05-08 14:07:59",revision=73]]
Hitbox = Object:extend()

function Hitbox:new(owner, x, y, w, h, ox, oy)
    self.x = x
    self.y = y
    self.w = w
    self.h = h
    self.__ox = ox or 0
    self.__oy = oy or 0
    self.__owner = owner
end

function Hitbox:update()
    if self.__owner then
        self.x = self.__owner.x + self.__ox
        self.y = self.__owner.y + self.__oy
    end
end

function Hitbox:draw()
    rect(self.x, self.y, self.x + self.w, self.y + self.h, 8)
end
:: main.lua
--[[pod_format="raw",created="2025-01-17 10:35:48",modified="2025-05-08 14:53:23",revision=697]]

include("classic.lua")

include("hitbox.lua")

include("bullet.lua")
include("ceiling.lua")

BTN = {
	up = 2,
	down = 3,
	left = 1,
	right = 0,
	o=4,
	x=5
}

local canvas = userdata("u8", 128, 128)


include("player.lua")

function _init()
	grav=0.02
	vid(3)
	player=Player()
end

function _update()
	foreach(bullets, function(obj) obj:update() end )
	player:update()
	ceiling:update()
end

function _draw()
	cls()
	cls(0)
	set_draw_target(canvas)
	cls(0)
	foreach(bullets, function(obj) obj:draw() end )
	player:draw()
	ceiling:draw()
	rect(0,0,127,127, 7)
		
	spr(32, 20, 110)
	set_draw_target()
	--draw_debug(0,0)
	
	spr(canvas, 56, 3) 
end

function v_mag( vx, vy )
  return sqrt( ( vx * vx ) + ( vy * vy ) )
end

function v_normalize( vx, vy )
  local len = v_mag( vx,vy )
  return vx / len, vy / len
end


function normalize_vector(dx, dy)
    local length = math.sqrt(dx * dx + dy * dy)
    if length > 0 then
        return dx / length, dy / length
    else
        return 0, 0
    end
end


function draw_debug(x, y)

	--Debugs Table
	local debugs = {
	    "\#3" .. "fps: " .. stat(7),
	    "\#3" .. "cpu: " .. flr(stat(1) * 100) .. "%",
	    "\#3" .. "ram: " .. flr(stat(0) / 1048576 * 100) / 100 .. "mb",
	    ----------------
	    --"\#1" .. "table: "    .. #table,
	    "\#1" .. "player.dy: "    .. player.dx,
	    "\#1" .. "player.dy: "    .. player.dy,
	}

	--Print Debugs
	for i = 0,#debugs do
	    local txt = debugs[i+1] or ""
	    local pad = string.rep(" ", max(0, 15 - #txt))
	    print("\014" .. txt .. pad, x, y + (7 * i), 7)
	end

end



function is_colliding(a,b)
    if ((b.x>=a.x+a.w) or
        (b.x+b.w<=a.x) or
        (b.y>=a.y+a.h) or
    (b.y+b.h<=a.y)) then
    return false
	else
	    return true
	end
end
:: player.lua
--[[pod_format="raw",created="2025-05-07 15:49:24",modified="2025-05-08 14:53:23",revision=750]]

Player=Object:extend()

function Player:new()
	self.img=7
	self.x=30
	self.y=30
	self.w=5
	self.h=5
	self.gravity = 0.5
	self.force=1
	self.y_force=1.5
	self.x_force=0.20
	self.dx=0
	self.dy=0
	self.shoot_delay = 0.2
	self.hitbox = Hitbox(self,self.x,self.y+4,self.w, self.h,1,1)
end

function Player:draw()
	spr(self.img, self.x, self.y)
end 

function Player:update()
	self.shoot_delay-=1
	self.y+=self.gravity
	if (btn(BTN.up)) then 
		self.dy = self.force
		self:shoot("up")
	elseif (btn(BTN.down)) then 
		self:shoot("down")
		self.dy = -self.force
	else
		self.dy = 0
	end

	if btn(BTN.right) then
		self.gravity = 0.2
		self:shoot("right")
		self.dx = self.force
	elseif btn(BTN.left)  then
		self.gravity = 0.2
		self:shoot("left")
		self.dx = -self.force
	else
		self.gravity = 0.5
		self.dx = 0
	end
		
	self.dx, self.dy = normalize_vector(self.dx, self.dy)
	self.y+=self.dy
	self.x+=self.dx
	self.hitbox:update()
	if is_colliding(self.hitbox, ceiling.hitbox) then
		player:die()
	end
	
end 

function Player:shoot(dir)
	if self.shoot_delay <= 0 then
		Bullet(self, {-self.dx,-self.dy})
		if dir == "up" then
			self.img=3
	 	elseif dir == "down" then
	 		self.img=7
	 	elseif dir == "left" then
	 		self.img=5
	 	elseif dir == "right" then
	 		self.img=1
		end
		self.shoot_delay = 6
	end
end


function Player:die()
	-- do something
end





:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NS0wOCAxNDo1MzoyMyIscnVudGltZT0xNyx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InBsYXllci5sdWEjMSIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0iYnVsbGV0Lmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJlbmVteS5sdWEjMTAiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8w
LmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2Vf
aW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
